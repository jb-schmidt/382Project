import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Scanner;


public class GameServer1 implements GameInterface{
	
	public GameInterface connectToOtherServer(String serverName, String host) throws RemoteException, NotBoundException
	{
		Registry registry = LocateRegistry.getRegistry(host, 12250);
		GameInterface stub = (GameInterface) registry.lookup(serverName);
		return stub;
	}
	
	public void makeComment(String comment, String serverName, String host, boolean differentiatesServers) throws NotBoundException, IOException, RemoteException
	{
		
		String string = "";
		if(serverName.equals("Game"))
			string = "Game2";
		else
			string = "Game";
		GameInterface stub = this.connectToOtherServer(string, host);
		stub.writeToFile("Chat", comment);
	}

	public String attachToServer() throws IOException, RemoteException
	{
		File file = new File("ClientStartup");
		BufferedReader br = new BufferedReader(new FileReader(file));
		String ClientServerToAttach = br.readLine();
		br.close();
		return ClientServerToAttach;
	}

	@Override
	public boolean checkTurn(String serverName, String host, boolean differentiatesServers)
			throws RemoteException, FileNotFoundException, IOException {
		File file = new File("TurnTracker");
		BufferedReader br = new BufferedReader(new FileReader(file));
		String turn = br.readLine();
		br.close();
		if(br.equals("True"))
		   return true;
		else
			return false;
	}

	@Override
	public String[][] updateBoard(String serverName, String host, boolean differentiatesServers)
			throws RemoteException, FileNotFoundException, IOException {
		File file = new File("Board");
		BufferedReader br = new BufferedReader(new FileReader(file));
		String boardState = br.readLine();
		br.close();
		String [] [] str = new String [3] [3];
		str[0][0] = String.valueOf(boardState.charAt(0));
		str[0][1] = String.valueOf(boardState.charAt(1));
		str[0][2] = String.valueOf(boardState.charAt(2));
		str[1][0] = String.valueOf(boardState.charAt(3));
		str[1][1] = String.valueOf(boardState.charAt(4));
		str[1][2] = String.valueOf(boardState.charAt(5));
		str[2][0] = String.valueOf(boardState.charAt(6));
		str[2][1] = String.valueOf(boardState.charAt(7));
		str[2][2] = String.valueOf(boardState.charAt(8));
		return str;
	}

	@Override
	public void addToBoard(String[][] str, String serverName, String host, boolean differentiatesServers)
			throws RemoteException, NotBoundException {
		String string = "";
		if(serverName.equals("Game"))
			string = "Game2";
		else
			string = "Game";
		GameInterface stub = this.connectToOtherServer(string, host);
		String comment = str[0][0] + str[0][1] + str[0][2] + str[1][0] + str[1][2] + str[2][0] + str[2][1] + str[2][2];
		stub.writeToFile("Board", comment);
		
	}

	@Override
	public void passTurn(String serverName, String host, boolean differentiatesServers) throws RemoteException, NotBoundException {
		String string = "";
		PrintWriter pw = null; 
		BufferedWriter bw = null;
		FileWriter fw = null;

		try {
			fw = new FileWriter("TurnTracker");
			bw = new BufferedWriter(fw);
			bw.write("False");
			bw.close();
			fw.close();

		} catch (IOException e) {

			e.printStackTrace();

		}
		
		String string1 = "";
		if(serverName.equals("Game"))
			string1 = "Game2";
		else
			string1 = "Game";
		GameInterface stub = this.connectToOtherServer(string, host);
		stub.writeToFile("TurnTracker", "True");
		
	}

	@Override
	public String readChat() throws RemoteException, FileNotFoundException, IOException {
		File file = new File("Chat");
		BufferedReader br = new BufferedReader(new FileReader(file));
		String str = br.readLine();
		br.close();
		return str;
	}

	public void writeToFile(String filename, String whatToWrite) throws RemoteException
	{
		BufferedWriter bw = null;
		FileWriter fw = null;

		try {
			fw = new FileWriter(filename);
			bw = new BufferedWriter(fw);
			bw.write(whatToWrite);
			bw.close();
			fw.close();

		} catch (IOException e) {

			e.printStackTrace();

		}
		
	}
	
	public static void main(String args[])
	{
		try{
			//System.setSecurityManager(new RMISecurityManager());
			//set the security manager

			GameServer1 obj = new GameServer1();
			GameInterface stub = (GameInterface) UnicastRemoteObject.exportObject(obj, 0);
			//String givenIP = args[0];
			
			//Bind the remote object's stub in the registry
			Registry registry = LocateRegistry.getRegistry(12250);
			//Registry registry = LocateRegistry.getRegistry(Integer.parseInt(givenIP));
			File file = new File("ServerStartup");
			BufferedReader br = new BufferedReader(new FileReader(file));
			String serverName = br.readLine();
			br.close();
			System.out.println(serverName);
			registry.bind(serverName, stub);
			System.err.println("Server ready");
		}

		catch (Exception e) {
			System.err.println("Server exception: " + e.toString());
			e.printStackTrace();
		}
	}
}
